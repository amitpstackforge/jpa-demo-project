package com.example.jpa.controller;

import com.example.jpa.entity.Patient;
import com.example.jpa.service.PatientService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

// ЁЯУМ ржПржЗ ржХрзНрж▓рж╛рж╕ржЯрж┐ ржПржХржЯрж┐ REST API ржХржирзНржЯрзНрж░рзЛрж▓рж╛рж░ тАФ ржПржЦрж╛ржирзЗ HTTP ржЕржирзБрж░рзЛржз (GET, POST, DELETE) ржЖрж╕ржмрзЗ
@RestController
@RequestMapping("/patients") // ЁЯСЙ ржПржЗ ржХржирзНржЯрзНрж░рзЛрж▓рж╛рж░рзЗрж░ рж╕ржм рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ рж╢рзБрж░рзБ рж╣ржмрзЗ /patients ржжрж┐рзЯрзЗ
public class PatientController {

    // тЬЕ Spring ржирж┐ржЬрзЗ ржерзЗржХрзЗржЗ ржПржЗ рж╕рж╛рж░рзНржнрж┐рж╕ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ ржПржирзЗ ржжрзЗржмрзЗ
    @Autowired
    private PatientService patientService;

    // тЬЕ рж╕ржм рж░рзЛржЧрзАрж░ рждрж╛рж▓рж┐ржХрж╛ ржжрзЗржЦрж╛ржмрзЗ (GET /patients)
    @GetMapping("/all")  // рж╕рзНржкрзЗрж╕рж┐ржлрж┐ржХ URL ржкрж╛рже ржпрзЛржЧ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ
    public List<Patient> getAllPatients() {
        return patientService.getAllPatients(); // ЁЯСЙ рж╕рж╛рж░рзНржнрж┐рж╕ ржерзЗржХрзЗ рж╕ржм рж░рзЛржЧрзА ржЖржирж╛ рж╣ржЪрзНржЫрзЗ
    }

    // тЬЕ ржирждрзБржи рж░рзЛржЧрзА ржпрзБржХрзНржд ржХрж░ржмрзЗ (POST /patients)
    @PostMapping("/create")  // рж╕рзНржкрзЗрж╕рж┐ржлрж┐ржХ URL ржкрж╛рже
    public Patient createPatient(@RequestBody Patient patient) {
        // ЁЯУМ @RequestBody ржорж╛ржирзЗ: рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯрзЗ ржпрзЗ JSON ржбрзЗржЯрж╛ ржПрж╕рзЗржЫрзЗ, рж╕рзЗржЯрж╛ржХрзЗ Patient ржЕржмржЬрзЗржХрзНржЯрзЗ рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рж╛ рж╣ржмрзЗ
        return patientService.savePatient(patient);
    }

    // тЬЕ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржПржХржЬржи рж░рзЛржЧрзАрж░ рждржерзНржп ржжрзЗржЦрж╛ржмрзЗ (GET /patients/{id})
    @GetMapping("/view/{id}")  // рж╕рзНржкрзЗрж╕рж┐ржлрж┐ржХ URL ржкрж╛рже
    public Patient getPatient(@PathVariable Long id) {
        // ЁЯУМ @PathVariable ржорж╛ржирзЗ: URL ржерзЗржХрзЗ id ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░ржЯрж┐ ржирж┐рзЯрзЗ ржХрж╛ржЬ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
        return patientService.getPatientById(id);
    }

    // тЬЕ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржПржХржЬржи рж░рзЛржЧрзАрж░ рждржерзНржп ржорзБржЫрзЗ ржлрзЗрж▓ржмрзЗ (DELETE /patients/{id})
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<String> deletePatient(@PathVariable Long id) {
        Patient patient = patientService.getPatientById(id);
        if (patient == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Patient not found with ID " + id);
        }
        patientService.deletePatient(id);
        return ResponseEntity.ok("Patient with ID " + id + " deleted successfully.");
    }


}
