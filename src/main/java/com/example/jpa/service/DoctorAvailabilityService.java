package com.example.jpa.service;

import com.example.jpa.dto.DoctorAvailabilityRequestDto;
import com.example.jpa.dto.DoctorAvailabilityResponseDto;
import com.example.jpa.entity.AppointmentSlot;
import com.example.jpa.entity.Doctor;
import com.example.jpa.entity.DoctorAvailability;
import com.example.jpa.exception.InvalidAvailabilityException;
import com.example.jpa.repository.AppointmentSlotRepository;
import com.example.jpa.repository.DoctorAvailabilityRepository;
import com.example.jpa.repository.DoctorRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

@Service
public class DoctorAvailabilityService {


    @Autowired
    private DoctorAvailabilityRepository doctorAvailabilityRepository;

    @Autowired
    private DoctorRepository doctorRepository;

    @Autowired
    private AppointmentSlotRepository appointmentSlotRepository;

    // Service method: ‡¶°‡¶æ‡¶ï‡ßç‡¶§‡¶æ‡¶∞ ‡¶è‡¶∞ availability (‡¶ï‡ßã‡¶® ‡¶¶‡¶ø‡¶®‡ßá, ‡¶ï‡¶§ ‡¶∏‡¶Æ‡ßü available ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡¶®) ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
    public DoctorAvailabilityResponseDto setAvailability(Long doctorId, DoctorAvailabilityRequestDto dto) {

        // 1. Doctor ‡¶ï‡ßá database ‡¶•‡ßá‡¶ï‡ßá ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶Ü‡¶®‡¶æ doctorId ‡¶¶‡¶ø‡ßü‡ßá
        // ‡¶Ø‡¶¶‡¶ø ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü ‡¶§‡¶æ‡¶π‡¶≤‡ßá custom exception throw ‡¶ï‡¶∞‡¶¨‡ßá
        Doctor doctor = doctorRepository.findById(doctorId)
                .orElseThrow(() -> new InvalidAvailabilityException("Doctor not found with ID " + doctorId));

        // 2. DTO ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶æ dayOfWeek (‡¶Ø‡ßá‡¶Æ‡¶® MONDAY, TUESDAY) ‡¶ï‡ßá Enum ‡¶è ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶ï‡¶∞‡¶æ
        DayOfWeek dayOfWeek;
        try {
            // toUpperCase() ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶Ø‡¶æ‡¶§‡ßá user "monday", "MONDAY", "Monday" ‡¶Ø‡ßá‡¶≠‡¶æ‡¶¨‡ßá‡¶á ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶ï, ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá
            dayOfWeek = DayOfWeek.valueOf(dto.getDayOfWeek().toUpperCase());
        } catch (IllegalArgumentException e) {
            // ‡¶Ø‡¶¶‡¶ø ‡¶≠‡ßÅ‡¶≤ ‡¶¶‡¶ø‡¶® ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü (‡¶Ø‡ßá‡¶Æ‡¶® Somobaar üòÖ), ‡¶§‡¶æ‡¶π‡¶≤‡ßá custom exception throw ‡¶π‡¶¨‡ßá
            throw new InvalidAvailabilityException("Invalid day of week: " + dto.getDayOfWeek());
        }

        // 3. DTO ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶æ ‡¶∏‡¶Æ‡ßü (AM/PM format) ‡¶ï‡ßá LocalTime ‡¶è parse ‡¶ï‡¶∞‡¶æ
        // "hh:mm a" ‡¶Æ‡¶æ‡¶®‡ßá ‡ßß‡ß® ‡¶ò‡¶®‡ßç‡¶ü‡¶æ‡¶∞ format, ‡¶∏‡¶æ‡¶•‡ßá AM/PM (‡¶Ø‡ßá‡¶Æ‡¶® "10:00 AM")
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("hh:mm a", Locale.ENGLISH);

        // Start time ‡¶ï‡ßá LocalTime ‡¶è convert ‡¶ï‡¶∞‡¶æ
        LocalTime start = LocalTime.parse(dto.getStartTime().toUpperCase(), formatter);

        // End time ‡¶ï‡ßá LocalTime ‡¶è convert ‡¶ï‡¶∞‡¶æ
        LocalTime end = LocalTime.parse(dto.getEndTime().toUpperCase(), formatter);

        // 4. Validation: End time ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á Start time ‡¶è‡¶∞ ‡¶™‡¶∞ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá
        if (end.isBefore(start)) {
            throw new InvalidAvailabilityException("End time must be after start time");
        }

        int slotDuration = dto.getSlotDuration() > 0 ? dto.getSlotDuration() : 15; // default 15 mins


        // 5. Validation: Slot duration positive ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá (0 ‡¶¨‡¶æ negative ‡¶π‡¶≤‡ßá invalid)
        if (slotDuration <= 0) {
            throw new InvalidAvailabilityException("Slot duration must be greater than 0");
        }
        LocalTime lunchStart = dto.getLunchStart() != null
                ? LocalTime.parse(dto.getLunchStart().toUpperCase(), formatter)
                : null;

        LocalTime lunchEnd = dto.getLunchEnd() != null
                ? LocalTime.parse(dto.getLunchEnd().toUpperCase(), formatter)
                : null;


        // 6. ‡¶®‡¶§‡ßÅ‡¶® DoctorAvailability object ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
        DoctorAvailability availability = new DoctorAvailability();

        // ‡¶ï‡ßã‡¶® Doctor ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶á availability, ‡¶∏‡ßá‡¶ü‡¶æ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
        availability.setDoctor(doctor);

        // ‡¶ï‡ßã‡¶® ‡¶¶‡¶ø‡¶® available ‚Üí MONDAY/TUESDAY ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
        availability.setDayOfWeek(dayOfWeek);

        // ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶∏‡¶Æ‡ßü ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
        availability.setStartTime(start);

        // ‡¶∂‡ßá‡¶∑ ‡¶∏‡¶Æ‡ßü ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
        availability.setEndTime(end);

        // ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø appointment slot ‡¶ï‡¶§ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü‡ßá‡¶∞ ‡¶π‡¶¨‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
        availability.setSlotDuration(dto.getSlotDuration());

        availability.setLunchStart(lunchStart);
        availability.setLunchEnd(lunchEnd);



        // 7. Database ‡¶è save ‡¶ï‡¶∞‡¶æ ‡¶è‡¶¨‡¶Ç return ‡¶ï‡¶∞‡¶æ
        doctorAvailabilityRepository.save(availability);


        List<AppointmentSlot> slotEntities = new ArrayList<>();
        LocalTime current = start;

        while (!current.plusMinutes(slotDuration).isAfter(end)) {
            LocalTime next = current.plusMinutes(slotDuration);

            AppointmentSlot slot = new AppointmentSlot();
            slot.setDate(LocalDate.now()); // ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ß‡¶∞‡¶≤‡¶æ‡¶Æ (future ‡¶è dynamic ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá)
            slot.setStartTime(current);
            slot.setEndTime(next);
            slot.setDoctorAvailability(availability);

            slotEntities.add(slot);
            current = next;
        }

// ‡¶∏‡¶¨ slot DB ‡¶§‡ßá save ‡¶ï‡¶∞‡¶¨
        appointmentSlotRepository.saveAll(slotEntities);



        return new DoctorAvailabilityResponseDto(
                availability.getDoctor().getId(),
                availability.getDoctor().getName(),
                availability.getDoctor().getSpecialization(),
                availability.getDayOfWeek().toString(),
                availability.getStartTime().toString(),
                availability.getEndTime().toString(),
                availability.getSlotDuration(),
                availability.getLunchStart().toString(),
                availability.getLunchEnd().toString()
                );
    }


}
